# -*- coding: utf-8 -*-
"""App.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jru56_0HIXerC3JB2gUzNNGZYfX3qk3K
"""

pip install streamlit pandas scikit-learn joblib

import streamlit as st
import pandas as pd
import joblib
from sklearn.preprocessing import MinMaxScaler, LabelEncoder

# Load model and preprocessing objects
model = joblib.load("gradient_boosting_salary_model.pkl")  # Use your exported model

# Define feature names expected by the model
feature_columns = ['age', 'workclass', 'fnlwgt', 'educational-num',
                   'marital-status', 'occupation', 'relationship', 'race', 'gender',
                   'capital-gain', 'capital-loss', 'hours-per-week', 'native-country']

# Encoders or mappings should match training preprocessing
workclass_map = {'Private': 0, 'Self-emp-not-inc': 1, 'Local-gov': 2, 'State-gov': 3}
# education_map = {'Bachelors': 0, 'HS-grad': 1, '11th': 2, 'Masters': 3, '9th': 4}
marital_map = {'Never-married': 0, 'Married-civ-spouse': 1}
occupation_map = {'Tech-support': 0, 'Craft-repair': 1, 'Other-service': 2}
relationship_map = {'Not-in-family': 0, 'Husband': 1, 'Wife': 2}
race_map = {'White': 0, 'Black': 1}
gender_map = {'Male': 0, 'Female': 1}
country_map = {'United-States': 0, 'Mexico': 1, 'Philippines': 2}

# UI
st.title("💼 Employee Salary Prediction App")

st.sidebar.header("Enter Employee Details")

def user_input():
    age = st.sidebar.slider("Age", 18, 70, 30)
    workclass = st.sidebar.selectbox("Workclass", list(workclass_map.keys()))
    fnlwgt = st.sidebar.number_input("Final Weight", 10000, 1000000, step=1000)
    # education = st.sidebar.selectbox("Education", list(education_map.keys()))
    edu_num = st.sidebar.slider("Educational Number", 1, 16, 10)
    marital = st.sidebar.selectbox("Marital Status", list(marital_map.keys()))
    occupation = st.sidebar.selectbox("Occupation", list(occupation_map.keys()))
    relationship = st.sidebar.selectbox("Relationship", list(relationship_map.keys()))
    race = st.sidebar.selectbox("Race", list(race_map.keys()))
    gender = st.sidebar.selectbox("Gender", list(gender_map.keys()))
    gain = st.sidebar.number_input("Capital Gain", 0, 100000)
    loss = st.sidebar.number_input("Capital Loss", 0, 100000)
    hours = st.sidebar.slider("Hours per week", 1, 100, 40)
    country = st.sidebar.selectbox("Native Country", list(country_map.keys()))

    data = {
        'age': age,
        'workclass': workclass_map[workclass],
        'fnlwgt': fnlwgt,
        # 'education': education_map[education],
        'educational-num': edu_num,
        'marital-status': marital_map[marital],
        'occupation': occupation_map[occupation],
        'relationship': relationship_map[relationship],
        'race': race_map[race],
        'gender': gender_map[gender],
        'capital-gain': gain,
        'capital-loss': loss,
        'hours-per-week': hours,
        'native-country': country_map[country]
    }

    return pd.DataFrame([data])

input_df = user_input()

st.subheader("Employee Information")
st.write(input_df)

# Scale the input like training
scaler = MinMaxScaler()
scaled_input = scaler.fit_transform(input_df)  # ⚠️ Replace with saved scaler in real case

# Predict
prediction = model.predict(scaled_input)
label = ">50K" if prediction[0] == 1 else "<=50K"

st.subheader("Predicted Income:")
st.success(f"The predicted income category is: **{label}**")